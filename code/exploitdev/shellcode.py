#!/usr/bin/python

import sys
import logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

from util import patch, pp_hexdump

class ShellCode(object):
    
    def __init__(self):
        self.opcodes = ""
        
    def fix(self, fn):
        if fn in self.fixes:
            instructions, fix = self.fixes.get(fn)

            logging.info("Patching shellcode for {}".format(fn))
            logging.info("Replacing bytes:\n\n{}\n----\n{}\n".format(
                pp_hexdump(instructions), pp_hexdump(fix)))

            self.opcodes = patch(self.opcodes, instructions, fix) 
        else:
            logging.error("The given function does not exist in the self.fixes table.")
            logging.info("Available self.fixes: {}".format(
                ", ".join([fix for fix in self.fixes.keys()])))
            logging.info("\n[i] Shellcode is unmodified.\n")

    def __repr__(self):
        return self.opcodes

    def __str__(self):
        result = "Length: {} bytes\n".format(len(self.opcodes))
        result += pp_hexdump(self.opcodes, width=16)

##### Generator
from payloads.shell import *
from payloads.bind import *

payloads = {
    "bind" : {
        "x86_linux" : x86LinuxBindShell,
     },
    "shell" : {
        "x86_linux" : x86LinuxShell,
    },
}

def generate(payload, platform, *args):
    available_payloads = payloads.keys()
    if payload not in available_payloads:
        logging.error("Payload type not found: {}".format(payload))
        logging.info("Available payloads: {}".format(", ".join(available_payloads)))
        sys.exit(1)

    logging.info("Payload type: {}".format(payload))

    available_platforms = payloads.get(payload)
    if platform not in available_platforms:
        logging.error("Platform {} not found.".format(platform))
        logging.info("Available platforms: {}".format(", ".join(available_platforms)))
        sys.exit(1)

    logging.info("Platform: {}".format(platform))

    logging.info("Generating {} shellcode for {} target.".format(payload, platform))
    return available_platforms.get(platform)(args)   
    
